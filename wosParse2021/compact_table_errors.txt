[jmccombs@iuni2 wosParse2021]$ ./launch_scala.bash 
Ivy Default Cache set to: /N/u/jmccombs/Carbonate/.ivy2/cache
The jars for the packages stored in: /N/u/jmccombs/Carbonate/.ivy2/jars
:: loading settings :: url = jar:file:/opt/cloudera/parcels/CDH-6.3.1-1.cdh6.3.1.p0.1470567/jars/ivy-2.4.0.jar!/org/apache/ivy/core/settings/ivysettings.xml
com.databricks#spark-xml_2.11 added as a dependency
graphframes#graphframes added as a dependency
:: resolving dependencies :: org.apache.spark#spark-submit-parent-5373bff5-7661-4f74-b418-4dd2f6a6699d;1.0
	confs: [default]
	found com.databricks#spark-xml_2.11;0.12.0 in central
	found commons-io#commons-io;2.8.0 in central
	found org.glassfish.jaxb#txw2;2.3.3 in central
	found org.apache.ws.xmlschema#xmlschema-core;2.2.5 in central
	found graphframes#graphframes;0.7.0-spark2.4-s_2.11 in local-m2-cache
:: resolution report :: resolve 255ms :: artifacts dl 7ms
	:: modules in use:
	com.databricks#spark-xml_2.11;0.12.0 from central in [default]
	commons-io#commons-io;2.8.0 from central in [default]
	graphframes#graphframes;0.7.0-spark2.4-s_2.11 from local-m2-cache in [default]
	org.apache.ws.xmlschema#xmlschema-core;2.2.5 from central in [default]
	org.glassfish.jaxb#txw2;2.3.3 from central in [default]
	---------------------------------------------------------------------
	|                  |            modules            ||   artifacts   |
	|       conf       | number| search|dwnlded|evicted|| number|dwnlded|
	---------------------------------------------------------------------
	|      default     |   5   |   0   |   0   |   0   ||   5   |   0   |
	---------------------------------------------------------------------
:: retrieving :: org.apache.spark#spark-submit-parent-5373bff5-7661-4f74-b418-4dd2f6a6699d
	confs: [default]
	0 artifacts copied, 5 already retrieved (0kB/8ms)
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
Spark context Web UI available at http://iuni2:4040
Spark context available as 'sc' (master = yarn, app id = application_1660499551205_0007).
Spark session available as 'spark'.
warning: there was one deprecation warning; re-run with -deprecation for details
[Stage 0:======================>                              (377 + 112) / 891]22/08/21 18:21:00 WARN hdfs.DataStreamer: Exception for BP-1688977172-172.20.105.8-1572455415324:blk_1191675860_117951237
java.io.IOException: Bad response ERROR for BP-1688977172-172.20.105.8-1572455415324:blk_1191675860_117951237 from datanode DatanodeInfoWithStorage[172.20.105.12:9866,DS-53e8da2b-9e93-4ce4-a4fa-b2cfcc049379,DISK]
	at org.apache.hadoop.hdfs.DataStreamer$ResponseProcessor.run(DataStreamer.java:1126)
22/08/21 18:21:00 WARN hdfs.DataStreamer: Error Recovery for BP-1688977172-172.20.105.8-1572455415324:blk_1191675860_117951237 in pipeline [DatanodeInfoWithStorage[172.20.105.15:9866,DS-407584c9-9201-4c1a-8fed-a8f148481a48,DISK], DatanodeInfoWithStorage[172.20.105.12:9866,DS-53e8da2b-9e93-4ce4-a4fa-b2cfcc049379,DISK], DatanodeInfoWithStorage[172.20.105.9:9866,DS-0e3e8ff4-d993-4d34-84b7-65bbb4f879be,DISK]]: datanode 1(DatanodeInfoWithStorage[172.20.105.12:9866,DS-53e8da2b-9e93-4ce4-a4fa-b2cfcc049379,DISK]) is bad.
[Stage 0:==================================================>   (831 + 60) / 891]22/08/21 19:58:46 WARN hdfs.DataStreamer: Slow waitForAckedSeqno took 42617ms (threshold=30000ms). File being written: /user/spark/driverLogs/application_1660499551205_0007_driver.log, block: BP-1688977172-172.20.105.8-1572455415324:blk_1191675861_117951238, Write pipeline datanodes: [DatanodeInfoWithStorage[172.20.105.14:9866,DS-ffb73ff1-238c-4647-8bd3-117e7c01a3cb,DISK], DatanodeInfoWithStorage[172.20.105.15:9866,DS-407584c9-9201-4c1a-8fed-a8f148481a48,DISK], DatanodeInfoWithStorage[172.20.105.13:9866,DS-6f15884f-02f6-48de-b426-f7df88d4db42,DISK]].
[Stage 0:==================================================>   (835 + 56) / 891]22/08/21 19:59:51 WARN hdfs.DataStreamer: Exception for BP-1688977172-172.20.105.8-1572455415324:blk_1191675861_117951238
java.io.IOException: Bad response ERROR for BP-1688977172-172.20.105.8-1572455415324:blk_1191675861_117951238 from datanode DatanodeInfoWithStorage[172.20.105.13:9866,DS-6f15884f-02f6-48de-b426-f7df88d4db42,DISK]
	at org.apache.hadoop.hdfs.DataStreamer$ResponseProcessor.run(DataStreamer.java:1126)
22/08/21 19:59:51 WARN hdfs.DataStreamer: Error Recovery for BP-1688977172-172.20.105.8-1572455415324:blk_1191675861_117951238 in pipeline [DatanodeInfoWithStorage[172.20.105.14:9866,DS-ffb73ff1-238c-4647-8bd3-117e7c01a3cb,DISK], DatanodeInfoWithStorage[172.20.105.15:9866,DS-407584c9-9201-4c1a-8fed-a8f148481a48,DISK], DatanodeInfoWithStorage[172.20.105.13:9866,DS-6f15884f-02f6-48de-b426-f7df88d4db42,DISK]]: datanode 2(DatanodeInfoWithStorage[172.20.105.13:9866,DS-6f15884f-02f6-48de-b426-f7df88d4db42,DISK]) is bad.
22/08/21 19:59:51 WARN hdfs.DataStreamer: Slow waitForAckedSeqno took 59996ms (threshold=30000ms). File being written: /user/spark/driverLogs/application_1660499551205_0007_driver.log, block: BP-1688977172-172.20.105.8-1572455415324:blk_1191675861_117951394, Write pipeline datanodes: [DatanodeInfoWithStorage[172.20.105.14:9866,DS-ffb73ff1-238c-4647-8bd3-117e7c01a3cb,DISK], DatanodeInfoWithStorage[172.20.105.15:9866,DS-407584c9-9201-4c1a-8fed-a8f148481a48,DISK], DatanodeInfoWithStorage[172.20.105.11:9866,DS-56bf0439-209d-49e7-be0a-c3e39c0f5602,DISK]].
+-------------------+--------------------+--------------------+--------------------+
|                UID|    _r_id_disclaimer|        dynamic_data|         static_data|
+-------------------+--------------------+--------------------+--------------------+
|WOS:000205076800009|ResearcherID data...|[[[[[, accession_...|[, [, [, 0,], [[1...|
|WOS:000200050100001|ResearcherID data...|[[[[[, accession_...|[, [, [, 0,], [[1...|
+-------------------+--------------------+--------------------+--------------------+
only showing top 2 rows

root
 |-- UID: string (nullable = true)
 |-- _r_id_disclaimer: string (nullable = true)
 |-- dynamic_data: struct (nullable = true)
 |    |-- cluster_related: struct (nullable = true)
 |    |    |-- identifiers: struct (nullable = true)
 |    |    |    |-- identifier: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |-- _type: string (nullable = true)
 |    |    |    |    |    |-- _value: string (nullable = true)
 |    |-- ic_related: struct (nullable = true)
 |    |    |-- oases: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- _is_OA: string (nullable = true)
 |    |    |    |-- oas: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |-- _type: string (nullable = true)
 |-- static_data: struct (nullable = true)
 |    |-- contributors: struct (nullable = true)
 |    |    |-- _count: long (nullable = true)
 |    |    |-- contributor: array (nullable = true)
 |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |-- name: struct (nullable = true)
 |    |    |    |    |    |-- _orcid_id: string (nullable = true)
 |    |    |    |    |    |-- _r_id: string (nullable = true)
 |    |    |    |    |    |-- _role: string (nullable = true)
 |    |    |    |    |    |-- _seq_no: long (nullable = true)
 |    |    |    |    |    |-- display_name: string (nullable = true)
 |    |    |    |    |    |-- first_name: string (nullable = true)
 |    |    |    |    |    |-- full_name: string (nullable = true)
 |    |    |    |    |    |-- last_name: string (nullable = true)
 |    |-- fullrecord_metadata: struct (nullable = true)
 |    |    |-- abstracts: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- abstract: struct (nullable = true)
 |    |    |    |    |-- abstract_text: struct (nullable = true)
 |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |-- p: array (nullable = true)
 |    |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |-- addresses: struct (nullable = true)
 |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- address_name: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- address_spec: struct (nullable = true)
 |    |    |    |    |    |    |-- _addr_no: long (nullable = true)
 |    |    |    |    |    |    |-- city: string (nullable = true)
 |    |    |    |    |    |    |-- country: string (nullable = true)
 |    |    |    |    |    |    |-- full_address: string (nullable = true)
 |    |    |    |    |    |    |-- organizations: struct (nullable = true)
 |    |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |    |-- organization: array (nullable = true)
 |    |    |    |    |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |    |    |    |    |-- _pref: string (nullable = true)
 |    |    |    |    |    |    |-- state: string (nullable = true)
 |    |    |    |    |    |    |-- street: string (nullable = true)
 |    |    |    |    |    |    |-- suborganizations: struct (nullable = true)
 |    |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |    |-- suborganization: array (nullable = true)
 |    |    |    |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |    |    |    |    |-- zip: array (nullable = true)
 |    |    |    |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _location: string (nullable = true)
 |    |    |    |    |    |-- names: struct (nullable = true)
 |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |-- name: array (nullable = true)
 |    |    |    |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |    |    |    |-- _addr_no: long (nullable = true)
 |    |    |    |    |    |    |    |    |-- _orcid_id_tr: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _r_id: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _r_id_tr: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _reprint: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _role: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _seq_no: long (nullable = true)
 |    |    |    |    |    |    |    |    |-- display_name: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- email_addr: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- first_name: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- full_name: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- last_name: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- suffix: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- wos_standard: string (nullable = true)
 |    |    |-- category_info: struct (nullable = true)
 |    |    |    |-- headings: struct (nullable = true)
 |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |-- heading: array (nullable = true)
 |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |    |-- subheadings: struct (nullable = true)
 |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |-- subheading: array (nullable = true)
 |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |    |-- subjects: struct (nullable = true)
 |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |-- subject: array (nullable = true)
 |    |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |    |-- _ascatype: string (nullable = true)
 |    |    |-- fund_ack: struct (nullable = true)
 |    |    |    |-- fund_text: struct (nullable = true)
 |    |    |    |    |-- p: array (nullable = true)
 |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |    |-- grants: struct (nullable = true)
 |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |-- grant: array (nullable = true)
 |    |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |    |-- _grant_source: string (nullable = true)
 |    |    |    |    |    |    |-- grant_agency: array (nullable = true)
 |    |    |    |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _pref: string (nullable = true)
 |    |    |    |    |    |    |-- grant_ids: struct (nullable = true)
 |    |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |    |-- grant_id: array (nullable = true)
 |    |    |    |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |-- keywords: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- keyword: array (nullable = true)
 |    |    |    |    |-- element: string (containsNull = true)
 |    |    |-- languages: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- language: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |-- _type: string (nullable = true)
 |    |    |-- normalized_doctypes: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- doctype: array (nullable = true)
 |    |    |    |    |-- element: string (containsNull = true)
 |    |    |-- normalized_languages: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- language: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |-- _status: string (nullable = true)
 |    |    |    |    |    |-- _type: string (nullable = true)
 |    |    |-- references: struct (nullable = true)
 |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- reference: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- _occurenceOrder: long (nullable = true)
 |    |    |    |    |    |-- art_no: string (nullable = true)
 |    |    |    |    |    |-- assignee: string (nullable = true)
 |    |    |    |    |    |-- citedAuthor: string (nullable = true)
 |    |    |    |    |    |-- citedTitle: string (nullable = true)
 |    |    |    |    |    |-- citedWork: string (nullable = true)
 |    |    |    |    |    |-- doi: string (nullable = true)
 |    |    |    |    |    |-- page: array (nullable = true)
 |    |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |    |    |    |-- patent_no: string (nullable = true)
 |    |    |    |    |    |-- physicalSection: array (nullable = true)
 |    |    |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |    |    |-- _physicalLocation: double (nullable = true)
 |    |    |    |    |    |-- uid: string (nullable = true)
 |    |    |    |    |    |-- volume: string (nullable = true)
 |    |    |    |    |    |-- year: string (nullable = true)
 |    |    |-- reprint_addresses: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- address_name: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- address_spec: struct (nullable = true)
 |    |    |    |    |    |    |-- _addr_no: long (nullable = true)
 |    |    |    |    |    |    |-- city: string (nullable = true)
 |    |    |    |    |    |    |-- country: string (nullable = true)
 |    |    |    |    |    |    |-- full_address: string (nullable = true)
 |    |    |    |    |    |    |-- organizations: struct (nullable = true)
 |    |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |    |-- organization: array (nullable = true)
 |    |    |    |    |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |    |    |    |    |-- _pref: string (nullable = true)
 |    |    |    |    |    |    |-- state: string (nullable = true)
 |    |    |    |    |    |    |-- street: string (nullable = true)
 |    |    |    |    |    |    |-- suborganizations: struct (nullable = true)
 |    |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |    |-- suborganization: array (nullable = true)
 |    |    |    |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |    |    |    |    |-- zip: array (nullable = true)
 |    |    |    |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _location: string (nullable = true)
 |    |    |    |    |    |-- names: struct (nullable = true)
 |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |-- name: array (nullable = true)
 |    |    |    |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |    |    |    |-- _addr_no: long (nullable = true)
 |    |    |    |    |    |    |    |    |-- _display: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _reprint: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _role: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- _seq_no: long (nullable = true)
 |    |    |    |    |    |    |    |    |-- display_name: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- email_addr: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- first_name: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- full_name: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- last_name: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- suffix: string (nullable = true)
 |    |    |    |    |    |    |    |    |-- wos_standard: string (nullable = true)
 |    |-- item: struct (nullable = true)
 |    |    |-- _xmlns:xsi: string (nullable = true)
 |    |    |-- _xsi:type: string (nullable = true)
 |    |    |-- bib_id: string (nullable = true)
 |    |    |-- bib_pagecount: struct (nullable = true)
 |    |    |    |-- _VALUE: long (nullable = true)
 |    |    |    |-- _type: string (nullable = true)
 |    |    |-- book_chapters: long (nullable = true)
 |    |    |-- book_desc: array (nullable = true)
 |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |-- bk_binding: string (nullable = true)
 |    |    |    |    |-- bk_ordering: string (nullable = true)
 |    |    |    |    |-- bk_prepay: string (nullable = true)
 |    |    |    |    |-- bk_price: struct (nullable = true)
 |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |-- _amount: double (nullable = true)
 |    |    |    |    |    |-- _currency: string (nullable = true)
 |    |    |    |    |    |-- _desc: string (nullable = true)
 |    |    |    |    |    |-- _volumes: long (nullable = true)
 |    |    |    |    |-- bk_publisher: string (nullable = true)
 |    |    |-- book_notes: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- book_note: array (nullable = true)
 |    |    |    |    |-- element: string (containsNull = true)
 |    |    |-- book_pages: long (nullable = true)
 |    |    |-- ids: struct (nullable = true)
 |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |-- _avail: string (nullable = true)
 |    |    |-- keywords_plus: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- keyword: array (nullable = true)
 |    |    |    |    |-- element: string (containsNull = true)
 |    |    |-- reviewed_work: struct (nullable = true)
 |    |    |    |-- languages: struct (nullable = true)
 |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |-- language: array (nullable = true)
 |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |    |-- rw_authors: struct (nullable = true)
 |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |-- rw_author: array (nullable = true)
 |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |    |-- rw_year: double (nullable = true)
 |    |-- summary: struct (nullable = true)
 |    |    |-- EWUID: struct (nullable = true)
 |    |    |    |-- WUID: struct (nullable = true)
 |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |-- _coll_id: string (nullable = true)
 |    |    |    |-- edition: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |-- _value: string (nullable = true)
 |    |    |-- conferences: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- conference: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- _conf_id: long (nullable = true)
 |    |    |    |    |    |-- conf_dates: struct (nullable = true)
 |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |-- conf_date: struct (nullable = true)
 |    |    |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |    |    |-- _conf_end: string (nullable = true)
 |    |    |    |    |    |    |    |-- _conf_start: string (nullable = true)
 |    |    |    |    |    |-- conf_infos: struct (nullable = true)
 |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |-- conf_info: string (nullable = true)
 |    |    |    |    |    |-- conf_locations: struct (nullable = true)
 |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |-- conf_location: struct (nullable = true)
 |    |    |    |    |    |    |    |-- conf_city: string (nullable = true)
 |    |    |    |    |    |    |    |-- conf_host: string (nullable = true)
 |    |    |    |    |    |    |    |-- conf_state: string (nullable = true)
 |    |    |    |    |    |-- conf_titles: struct (nullable = true)
 |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |-- conf_title: string (nullable = true)
 |    |    |    |    |    |-- sponsors: struct (nullable = true)
 |    |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |    |-- sponsor: array (nullable = true)
 |    |    |    |    |    |    |    |-- element: string (containsNull = true)
 |    |    |-- doctypes: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- doctype: array (nullable = true)
 |    |    |    |    |-- element: string (containsNull = true)
 |    |    |-- names: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- name: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- _addr_no: string (nullable = true)
 |    |    |    |    |    |-- _orcid_id_tr: string (nullable = true)
 |    |    |    |    |    |-- _r_id_tr: string (nullable = true)
 |    |    |    |    |    |-- _reprint: string (nullable = true)
 |    |    |    |    |    |-- _role: string (nullable = true)
 |    |    |    |    |    |-- _seq_no: long (nullable = true)
 |    |    |    |    |    |-- display_name: string (nullable = true)
 |    |    |    |    |    |-- email_addr: string (nullable = true)
 |    |    |    |    |    |-- first_name: string (nullable = true)
 |    |    |    |    |    |-- full_name: string (nullable = true)
 |    |    |    |    |    |-- last_name: string (nullable = true)
 |    |    |    |    |    |-- suffix: string (nullable = true)
 |    |    |    |    |    |-- wos_standard: string (nullable = true)
 |    |    |-- pub_info: struct (nullable = true)
 |    |    |    |-- _coverdate: string (nullable = true)
 |    |    |    |-- _early_access_date: string (nullable = true)
 |    |    |    |-- _early_access_month: long (nullable = true)
 |    |    |    |-- _early_access_year: long (nullable = true)
 |    |    |    |-- _has_abstract: string (nullable = true)
 |    |    |    |-- _issue: string (nullable = true)
 |    |    |    |-- _part_no: string (nullable = true)
 |    |    |    |-- _pubmonth: string (nullable = true)
 |    |    |    |-- _pubtype: string (nullable = true)
 |    |    |    |-- _pubyear: long (nullable = true)
 |    |    |    |-- _sortdate: date (nullable = true)
 |    |    |    |-- _special_issue: string (nullable = true)
 |    |    |    |-- _supplement: string (nullable = true)
 |    |    |    |-- _vol: string (nullable = true)
 |    |    |    |-- page: struct (nullable = true)
 |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |-- _begin: string (nullable = true)
 |    |    |    |    |-- _end: string (nullable = true)
 |    |    |    |    |-- _page_count: long (nullable = true)
 |    |    |-- publishers: struct (nullable = true)
 |    |    |    |-- publisher: struct (nullable = true)
 |    |    |    |    |-- address_spec: struct (nullable = true)
 |    |    |    |    |    |-- _addr_no: long (nullable = true)
 |    |    |    |    |    |-- city: string (nullable = true)
 |    |    |    |    |    |-- full_address: string (nullable = true)
 |    |    |    |    |-- names: struct (nullable = true)
 |    |    |    |    |    |-- _count: long (nullable = true)
 |    |    |    |    |    |-- name: struct (nullable = true)
 |    |    |    |    |    |    |-- _addr_no: long (nullable = true)
 |    |    |    |    |    |    |-- _role: string (nullable = true)
 |    |    |    |    |    |    |-- _seq_no: long (nullable = true)
 |    |    |    |    |    |    |-- display_name: string (nullable = true)
 |    |    |    |    |    |    |-- full_name: string (nullable = true)
 |    |    |    |    |    |    |-- unified_name: string (nullable = true)
 |    |    |-- titles: struct (nullable = true)
 |    |    |    |-- _count: long (nullable = true)
 |    |    |    |-- title: array (nullable = true)
 |    |    |    |    |-- element: struct (containsNull = true)
 |    |    |    |    |    |-- _VALUE: string (nullable = true)
 |    |    |    |    |    |-- _translated: string (nullable = true)
 |    |    |    |    |    |-- _type: string (nullable = true)

[Stage 2:====================================>                (615 + 112) / 891]22/08/21 21:44:11 WARN scheduler.TaskSetManager: Lost task 507.0 in stage 2.0 (TID 1404, iuni7, executor 22): org.apache.spark.SparkException: Task failed while writing rows.
	at org.apache.spark.sql.execution.datasources.FileFormatWriter$.org$apache$spark$sql$execution$datasources$FileFormatWriter$$executeTask(FileFormatWriter.scala:257)
	at org.apache.spark.sql.execution.datasources.FileFormatWriter$$anonfun$write$1.apply(FileFormatWriter.scala:170)
	at org.apache.spark.sql.execution.datasources.FileFormatWriter$$anonfun$write$1.apply(FileFormatWriter.scala:169)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)
	at org.apache.spark.scheduler.Task.run(Task.scala:121)
	at org.apache.spark.executor.Executor$TaskRunner$$anonfun$11.apply(Executor.scala:407)
	at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1408)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:413)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at org.apache.hadoop.net.SocketIOWithTimeout.connect(SocketIOWithTimeout.java:206)
	at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:531)
	at org.apache.hadoop.hdfs.DataStreamer.createSocketForPipeline(DataStreamer.java:253)
	at org.apache.hadoop.hdfs.DataStreamer$StreamerStreams.<init>(DataStreamer.java:162)
	at org.apache.hadoop.hdfs.DataStreamer.transfer(DataStreamer.java:1450)
	at org.apache.hadoop.hdfs.DataStreamer.addDatanode2ExistingPipeline(DataStreamer.java:1407)
	at org.apache.hadoop.hdfs.DataStreamer.handleDatanodeReplacement(DataStreamer.java:1598)
	at org.apache.hadoop.hdfs.DataStreamer.setupPipelineInternal(DataStreamer.java:1499)
	at org.apache.hadoop.hdfs.DataStreamer.setupPipelineForAppendOrRecovery(DataStreamer.java:1481)
	at org.apache.hadoop.hdfs.DataStreamer.processDatanodeOrExternalError(DataStreamer.java:1256)
	at org.apache.hadoop.hdfs.DataStreamer.run(DataStreamer.java:667)
	Suppressed: java.io.IOException: The file being written is in an invalid state. Probably caused by an error thrown previously. Current state: COLUMN
		at org.apache.parquet.hadoop.ParquetFileWriter$STATE.error(ParquetFileWriter.java:185)
		at org.apache.parquet.hadoop.ParquetFileWriter$STATE.startBlock(ParquetFileWriter.java:177)
		at org.apache.parquet.hadoop.ParquetFileWriter.startBlock(ParquetFileWriter.java:287)
		at org.apache.parquet.hadoop.InternalParquetRecordWriter.flushRowGroupToStore(InternalParquetRecordWriter.java:166)
		at org.apache.parquet.hadoop.InternalParquetRecordWriter.close(InternalParquetRecordWriter.java:109)
		at org.apache.parquet.hadoop.ParquetRecordWriter.close(ParquetRecordWriter.java:162)
		at org.apache.spark.sql.execution.datasources.parquet.ParquetOutputWriter.close(ParquetOutputWriter.scala:42)
		at org.apache.spark.sql.execution.datasources.FileFormatDataWriter.releaseResources(FileFormatDataWriter.scala:57)
		at org.apache.spark.sql.execution.datasources.FileFormatDataWriter.abort(FileFormatDataWriter.scala:83)
		at org.apache.spark.sql.execution.datasources.FileFormatWriter$$anonfun$org$apache$spark$sql$execution$datasources$FileFormatWriter$$executeTask$1.apply$mcV$sp(FileFormatWriter.scala:250)
		at org.apache.spark.util.Utils$.tryWithSafeFinallyAndFailureCallbacks(Utils.scala:1451)
		at org.apache.spark.sql.execution.datasources.FileFormatWriter$.org$apache$spark$sql$execution$datasources$FileFormatWriter$$executeTask(FileFormatWriter.scala:248)
		at org.apache.spark.sql.execution.datasources.FileFormatWriter$$anonfun$write$1.apply(FileFormatWriter.scala:170)
		at org.apache.spark.sql.execution.datasources.FileFormatWriter$$anonfun$write$1.apply(FileFormatWriter.scala:169)
		at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:90)
		at org.apache.spark.scheduler.Task.run(Task.scala:121)
		at org.apache.spark.executor.Executor$TaskRunner$$anonfun$11.apply(Executor.scala:407)
		at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1408)
		at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:413)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
		at java.lang.Thread.run(Thread.java:748)

Welcome to                                                                      
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.4.0-cdh6.3.1
      /_/
         
Using Scala version 2.11.12 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_181)
Type in expressions to have them evaluated.
Type :help for more information.

scala> 

